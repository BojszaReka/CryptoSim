{
  "openapi": "3.0.4",
  "info": {
    "title": "Crypto Simulation API",
    "description": "An ASP.NET Core Web API for the simulation of buying and selling of crypto currency",
    "version": "v1"
  },
  "paths": {
    "/api/Crypto/price": {
      "put": {
        "tags": [
          "Crypto"
        ],
        "summary": "Updates the price of a crypto currency",
        "parameters": [
          {
            "name": "cryptoId",
            "in": "query",
            "description": "Id of the crypto currency to modify",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "price",
            "in": "query",
            "description": "The new price of the crpyto currency",
            "schema": {
              "type": "number",
              "format": "double"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Crypto/price/history/{CryptoId}": {
      "get": {
        "tags": [
          "Crypto"
        ],
        "summary": "Returns the price history of the crypto currency",
        "parameters": [
          {
            "name": "CryptoId",
            "in": "path",
            "description": "Id of the crypto currency",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Cryptos": {
      "get": {
        "tags": [
          "Cryptos"
        ],
        "summary": "Retrieves a list of all available crypto currencies.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "post": {
        "tags": [
          "Cryptos"
        ],
        "summary": "Creates a new crypto currency with the provided details.",
        "requestBody": {
          "description": "The data of the new crypto currency to be created.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewCrypto"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCrypto"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewCrypto"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewCrypto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Cryptos/{CryptoId}": {
      "get": {
        "tags": [
          "Cryptos"
        ],
        "summary": "Retrieves a specific crypto currency by its ID.",
        "parameters": [
          {
            "name": "CryptoId",
            "in": "path",
            "description": "The ID of the crypto currency to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Cryptos"
        ],
        "summary": "Deletes a crypto currency based on the provided ID.",
        "parameters": [
          {
            "name": "CryptoId",
            "in": "path",
            "description": "The ID of the crypto currency to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Profit/profit/{UserId}": {
      "get": {
        "tags": [
          "Profit"
        ],
        "summary": "Retrieves the total profit for a specific user.",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "description": "The ID of the user whose profit is being requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Profit/profit/detail/{UserId}": {
      "get": {
        "tags": [
          "Profit"
        ],
        "summary": "Retrieves a detailed breakdown of the user's profit, including transaction history or specific gains.",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "description": "The ID of the user for whom detailed profit information is requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Trade/buy": {
      "post": {
        "tags": [
          "Trade"
        ],
        "summary": "Executes a crypto buy transaction for a user.",
        "requestBody": {
          "description": "The details of the trade including user ID, crypto ID, and quantity.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TradeRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TradeRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Trade/sell": {
      "post": {
        "tags": [
          "Trade"
        ],
        "summary": "Executes a crypto sell transaction for a user.",
        "requestBody": {
          "description": "The details of the trade including user ID, crypto ID, and quantity.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/TradeRequestDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeRequestDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/TradeRequestDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/TradeRequestDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Trade/portfolio/{UserId}": {
      "get": {
        "tags": [
          "Trade"
        ],
        "summary": "Retrieves the crypto portfolio for a specific user, including their owned assets and quantities.",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "description": "The ID of the user whose portfolio is being requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Transactions/GetUserTransactions/{UserId}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieves all transactions made by a specific user.",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "description": "The ID of the user whose transaction history is requested.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Transactions/GetTransationDetails/{TransactionId}": {
      "get": {
        "tags": [
          "Transactions"
        ],
        "summary": "Retrieves detailed information about a specific transaction.",
        "parameters": [
          {
            "name": "TransactionId",
            "in": "path",
            "description": "The ID of the transaction to retrieve details for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Registers a new user with the specified username, email, and password.",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The username for the new user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "email",
            "in": "query",
            "description": "The email address of the new user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the new user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "An existing user can log in using their email and password, then they can view their userID",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email address of the user.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for the user.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Users/{UserId}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Retrieves the details of a user by their user ID.",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "description": "The unique identifier of the user to retrieve.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Updates the password of a specific user by their user ID.",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "description": "The unique identifier of the user to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newPassword",
            "in": "query",
            "description": "The new password of the user",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "summary": "Deletes a user by their user ID.",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "description": "The unique identifier of the user to delete.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Wallet/{UserId}": {
      "get": {
        "tags": [
          "Wallet"
        ],
        "summary": "Retrieves the wallet details of a specific user.",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "description": "The unique identifier of the user whose wallet is being retrieved.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      },
      "delete": {
        "tags": [
          "Wallet"
        ],
        "summary": "Deletes a user's wallet.",
        "parameters": [
          {
            "name": "UserId",
            "in": "path",
            "description": "The unique identifier of the user whose wallet is being deleted.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Wallet": {
      "put": {
        "tags": [
          "Wallet"
        ],
        "summary": "Updates the wallet details for a specific user.",
        "requestBody": {
          "description": "The ID of the user whose wallet is being updated and the new balance.",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/WalletUpdateDTO"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletUpdateDTO"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/WalletUpdateDTO"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/WalletUpdateDTO"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "NewCrypto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "startingRate": {
            "type": "number",
            "format": "double"
          },
          "quantity": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "TradeRequestDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "cryptoId": {
            "type": "string",
            "format": "uuid"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "WalletUpdateDTO": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "balance": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      }
    }
  }
}